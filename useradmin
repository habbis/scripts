#! /usr/bin/env python3
"""
Generate add user on linux systems
"""
from __future__ import print_function
import argparse
import getpass
import crypt
from fabric2 import Connection

arg_parser  = argparse.ArgumentParser(description=__doc__)
arg_parser.add_argument("--user", help="remote user for login to server",required=True)
arg_parser.add_argument("--useradd", help="user to add or remove",required=False)
arg_parser.add_argument("--server", help="server to manage users",required=True)

# We parse the args here to do some additional
# obscure checks
parsed_args = arg_parser.parse_args()
user = parsed_args.user
useradd = parsed_args.useradd
server = parsed_args.server


c = Connection(f'{user}@{server}')
try:
  #c.run(f"sudo useradd --create-home --groups wheel --shell /bin/bash {useradd}  ")
  c.run(f"sudo useradd --create-home  --shell /bin/bash {useradd}  ")
  c.run(f"sudo mkdir -p  /home/{useradd}/.ssh" )
  c.run(f"sudo chmod 700 /home/{useradd}/.ssh")
  c.sudo(f"curl https://github.com/{useradd}.keys > /tmp/{useradd}_authorized_keys")
  c.run(f"sudo cp -r /tmp/{useradd}_authorized_keys /home/{useradd}/.ssh/authorized_keys")
  c.run(f"sudo chmod 644 /home/{useradd}/.ssh/authorized_keys")
  c.run(f"sudo chown -R {useradd}:{useradd} /home/{useradd}/.ssh/")
  c.run(f"sudo  echo '{useradd}  ALL=(ALL)       NOPASSWD: ALL' > /tmp/00_{useradd}")
  c.run(f"sudo  mv /tmp/00_{useradd} /etc/sudoers.d/00_{useradd}")
  c.run(f"sudo chmod 0440 /etc/sudoers.d/00_{useradd}")
  c.run(f"sudo chown -R root:root /etc/sudoers.d/00_{useradd}")
except:
  print("user exist")

